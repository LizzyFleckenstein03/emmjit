local f = io.open("gen.asm", "w")
f:write("; generated by gen.lua\n")

local builtin = {
    ['#'] = "pushzero",
    ['+'] = "add",
    ['-'] = "sub",
    ['~'] = "log",
    ['.'] = "output",
    [','] = "input",
    ['^'] = "enqueue",
    ['v'] = "dequeue",
    [':'] = "dup",
    ['!'] = "compile",
    ['?'] = "exec",
    [';'] = "pushsep",
}

f:write("section .text\n")
for i = 0, 9 do
    builtin[tostring(i)] = tostring(i)
    f:write("op_"..i..":\n")
    f:write("\tSTACK_POP\n")
    f:write("\tlea rax, [rax*4+rax]\n")
    f:write("\tlea rax, [rax*2+"..i.."]\n")
    f:write("\tSTACK_PUSH\n")
    f:write("\tret\n")
    f:write(".end: int3\n")
    f:write("%define FLAGS_op_"..i.." FLAG_POP | FLAG_PUSH\n")
end

f:write("section .data\n")

local funcs = ""
for i = 0, 255 do
    funcs = funcs.."op_"..(builtin[string.char(i)] or "nop")..(i==255 and "" or ", ")
end
funcs = funcs.."\n"

f:write("instr_func_init: dq " .. funcs)
f:write("instr_func: dq " .. funcs)

f:write("instr_info: dd ")
for i = 0, 255 do
    local op = "op_"..(builtin[string.char(i)] or "nop")
    f:write(
        "FLAGS_"..op..",  ".. -- flags
        "("..op..".end-"..op..")".. -- size
        (i==255 and "" or ", "))
end
f:write("\n")
